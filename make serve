
This will start a local web server on port 4545. Open your web browser and navigate to `http://localhost:4545` to see the example in action.

## Project Structure

- `main.go`: The Go code that will be compiled to WebAssembly.
- `index.html`: The HTML file that loads and uses the WebAssembly module.
- `wasm_exec.js`: JavaScript glue code provided by Go (copied from Go installation).
- `Makefile`: Automates the build process.

## How it Works

1. The Go code in `main.go` defines two functions:
   - `greet`: Takes a name as input and returns a greeting message.
   - `fibonacci`: Calculates the nth Fibonacci number.
2. The code is compiled to WebAssembly using the `GOOS=js GOARCH=wasm go build` command.
3. The HTML file loads the `wasm_exec.js` script and the compiled WebAssembly module.
4. When the user interacts with the web page:
   - Entering a name and clicking "Greet" calls the `greet` function.
   - Entering a number and clicking "Calculate" calls the `fibonacci` function.

## CORS Error Handling

If you open the `index.html` file directly in a browser without using a web server, you may encounter CORS errors. The application now detects these errors and displays a helpful message explaining how to properly run the project.

## Cleaning Up

To remove the generated files, run:

